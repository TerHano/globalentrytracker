import type { ApiResponse } from "~/models/ApiResponse";
import createFetchClient, { type Middleware } from "openapi-fetch";
import createClient from "openapi-react-query";

import type { paths } from "~/types/api"; // generated by openapi-typescript
import { getSupabaseToken } from "./supabase/get-supabase-token-client";

const BASE_URL = import.meta.env.VITE_API_SERVER_BASE_URL;
// Replace with your actual base URL

// export async function fetchData<T = null>(
//   endpoint: string,
//   options: RequestInit = {
//     cache: "no-store",
//   }
// ): Promise<T> {
//   const url = `${BASE_URL}${endpoint}`;
//   const response = await fetch(url, options);
//   const data: ApiResponse<T> = await response.json();
//   if (!data.success) {
//     throw data.errors;
//     //throw new Error(`Error fetching data: ${data.errors}`);
//   }
//   return data.data as T;
// }

function validateResponse<T>(
  apiResponse: ApiResponse<T> | undefined
): NonNullable<T> {
  if (!apiResponse) {
    throw new Error("No response data");
  }
  //const apiResponse = response as ApiResponse<unknown>;
  if (!apiResponse.success) {
    throw new Error(`Error fetching data: ${apiResponse.errors}`);
  }
  if (apiResponse.data === null || apiResponse.data === undefined) {
    throw new Error("Response data is null or undefined");
  }
  return apiResponse.data;
}

// function to set the Authorization header
async function setAuthorizationHeader(request: Request) {
  const accessToken = await getSupabaseToken();
  if (accessToken) {
    request.headers.set("Authorization", `Bearer ${accessToken}`);
  }
  return request;
}

const UNPROTECTED_ROUTES = ["/api/v1/plans"];
const authMiddleware: Middleware = {
  onRequest: async ({ schemaPath, request }) => {
    if (UNPROTECTED_ROUTES.some((pathname) => schemaPath.includes(pathname))) {
      return undefined; // donâ€™t modify request for certain paths
    }
    // Check if Authorization header is already set
    if (request.headers.has("Authorization")) {
      return request;
    }
    // If the Authorization header is not set, get the access token from supabase
    const accessToken = await getSupabaseToken();
    // for all other paths, set Authorization header as expected
    request.headers.set("Authorization", `Bearer ${accessToken}`);
    return request;
  },
  // onResponse: async ({ response }) => {
  //   const data = await response
  //     .clone()
  //     .json()
  //     .catch(() => undefined);
  //   // If the response is an ApiResponse, unwrap it
  //   if (
  //     data &&
  //     typeof data === "object" &&
  //     "success" in data &&
  //     "data" in data
  //   ) {
  //     if (!data.success) {
  //       throw new Error(`API Error: ${data.errors}`);
  //     }
  //     // Replace the response body with the unwrapped data
  //     const blob = new Blob([JSON.stringify(data.data)], {
  //       type: "application/json",
  //     });
  //     return new Response(blob, response);
  //   }
  //   return response;
  // },
};

const fetchClient = createFetchClient<paths>({
  baseUrl: BASE_URL,
  headers: {
    "Content-Type": "application/json",
    Accept: "application/json",
  },
});
fetchClient.use(authMiddleware);

const $api = createClient(fetchClient);

export { fetchClient, $api, validateResponse, setAuthorizationHeader };
